const identity = x => x
const middlewares = [handleResponse]

export { init, middlewares, create401Handler, createHeaders, errorParser }

function init({ auth }) {
  return function createMethod(method, extendHeaders = identity) {
    return (url, postData) => {
      const isFormData = postData instanceof FormData
      const headers = createHeaders(auth)

      if (isFormData) delete headers['Content-Type']

      const config = Object.assign(
        {
          method,
          mode: 'cors',
          headers: extendHeaders(headers),
        },
        postData
          ? { body: isFormData ? postData : JSON.stringify(postData) }
          : null
      )

      return fetch(url, config).then(runMiddleware)
    }
  }
}

function runMiddleware(response) {
  return middlewares.reduce(
    (promise, middleware) => promise.then(middleware),
    Promise.resolve(response)
  )
}

function handleResponse(res) {
  if (res.ok) {
    const contentType = res.headers.get('Content-Type')
    return callResponseMethodForContentType(contentType, res)
  }

  return Promise.reject(res)
}

function callResponseMethodForContentType(type, res) {
  if (/json/.test(type)) {
    return res.json()
  }

  if (/text|html/.test(type)) {
    return res.text()
  }

  return res
}

function createHeaders(auth) {
  const token = auth.getToken()
  const impersonatedUser = auth.getImpersonatedUser()
  const headers = { 'Content-Type': 'application/json' }

  if (token) {
    headers.Authorization = `Bearer ${token}`
  }

  if (impersonatedUser) {
    headers['X-Impersonate'] = impersonatedUser.email
  }

  return headers
}

function create401Handler(getStore, browserHistory) {
  return res => {
    if (res.status === 401) {
      getStore().dispatch({ type: 'AUTH_LOGOUT' })
      browserHistory.replace('/login')
    }

    return res
  }
}

async function errorParser(res) {
  if (!res.ok) {
    const contentType = res.headers.get('Content-Type')
    const parsed = await callResponseMethodForContentType(contentType, res)

    if (typeof parsed === 'string') {
      res.serverResponse = { message: parsed }
    } else if (typeof parsed === 'object' && !(parsed instanceof Response)) {
      res.serverResponse = parsed
    } else {
      res.serverResponse = {}
    }
  }

  return res
}
